"""
Aplicaci√≥n principal del sistema de reservas de cine.
FastAPI backend con funcionalidades de autenticaci√≥n, reservas y premium.

Caracter√≠sticas principales:
- API REST completa con documentaci√≥n autom√°tica
- Autenticaci√≥n JWT con expiraci√≥n de sesiones
- Sistema de reservas de asientos con estados
- Funcionalidad premium con beneficios exclusivos
- Simulaci√≥n de bot para concurrencia
- Limpieza autom√°tica de usuarios expirados
- Logging detallado de todas las operaciones
"""

from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from sqlalchemy.orm import Session
from apscheduler.schedulers.background import BackgroundScheduler
from contextlib import asynccontextmanager
import logging
from datetime import datetime
import os

# Imports locales
from database import create_tables, get_db, cleanup_expired_users, get_database_stats
from routers import auth, reservations
from schemas import ApiResponse

# Configuraci√≥n de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('cinema_backend.log')
    ]
)
logger = logging.getLogger(__name__)

# Variables globales para el scheduler
scheduler = None
app_start_time = datetime.utcnow()


def cleanup_job():
    """
    Job programado para limpiar usuarios expirados.
    Se ejecuta cada 2 minutos en background.
    """
    try:
        from database import SessionLocal
        db = SessionLocal()
        
        deleted_count = cleanup_expired_users(db)
        stats = get_database_stats(db)
        
        if deleted_count > 0 or stats.get("active_users", 0) > 0:
            logger.info(f"üïí Limpieza programada - Eliminados: {deleted_count} | "
                       f"Usuarios activos: {stats.get('active_users', 0)} | "
                       f"Reservas: {stats.get('active_reservations', 0)}")
        
        db.close()
        
    except Exception as e:
        logger.error(f"‚ùå Error en limpieza programada: {e}")


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Context manager para manejar el ciclo de vida de la aplicaci√≥n.
    Inicializa la base de datos y el scheduler al inicio.
    """
    global scheduler
    
    try:
        # Inicializar base de datos
        logger.info("üöÄ Iniciando sistema de reservas de cine...")
        create_tables()
        
        # Inicializar scheduler para limpieza autom√°tica
        scheduler = BackgroundScheduler()
        scheduler.add_job(
            cleanup_job, 
            'interval', 
            minutes=2,  # Ejecutar cada 2 minutos
            id='cleanup_expired_users'
        )
        scheduler.start()
        logger.info("‚è∞ Scheduler de limpieza iniciado (cada 2 minutos)")
        
        # Log de inicio exitoso
        logger.info("‚úÖ Sistema de reservas de cine iniciado correctamente")
        logger.info("üé≠ API disponible en: http://localhost:8000")
        logger.info("üìñ Documentaci√≥n en: http://localhost:8000/docs")
        
        yield
        
    except Exception as e:
        logger.error(f"‚ùå Error durante inicializaci√≥n: {e}")
        raise
    finally:
        # Cleanup al cerrar la aplicaci√≥n
        if scheduler and scheduler.running:
            scheduler.shutdown()
            logger.info("‚è∞ Scheduler de limpieza detenido")
        
        logger.info("üëã Sistema de reservas de cine detenido")


# Crear aplicaci√≥n FastAPI
app = FastAPI(
    title="üé¨ Cinema Reservations API",
    description="""
    ## Sistema de Reservas de Cine - Demo

    Una API REST completa para gesti√≥n de reservas de cine con las siguientes caracter√≠sticas:

    ### üöÄ Funcionalidades Principales
    - **Autenticaci√≥n temporal**: Usuarios con expiraci√≥n autom√°tica en 10 minutos
    - **Sistema de asientos**: Grilla interactiva con estados (libre, reservado, premium)
    - **Reservas inteligentes**: Gesti√≥n de asientos con validaciones de concurrencia
    - **Premium Experience**: Upgrade con descuentos y auto-selecci√≥n de mejores asientos
    - **Bot Simulator**: Simulaci√≥n de usuarios concurrentes para testing

    ### üîí Seguridad
    - Contrase√±as hasheadas con bcrypt
    - Autenticaci√≥n JWT con expiraci√≥n
    - L√≠mite m√°ximo de 12 usuarios simult√°neos
    - Limpieza autom√°tica de sesiones expiradas

    ### üéØ Tecnolog√≠as
    - **FastAPI** para la API REST
    - **PostgreSQL** para persistencia
    - **SQLAlchemy** como ORM
    - **JWT** para autenticaci√≥n
    - **APScheduler** para tareas en background

    ### üìä Monitoreo
    - Logging detallado de todas las operaciones
    - Estad√≠sticas en tiempo real del sistema
    - Limpieza autom√°tica cada 2 minutos
    """,
    version="1.0.0",
    contact={
        "name": "Cinema Reservations System",
        "url": "https://github.com/tu-repo/cinema-reservations",
    },
    license_info={
        "name": "MIT License",
        "url": "https://opensource.org/licenses/MIT",
    },
    lifespan=lifespan
)

# Configuraci√≥n de CORS para permitir el frontend React
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:3000",  # React development server
        "http://localhost:3001",  # React production build
        "http://frontend:3000",   # Docker container
    ],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Registrar routers
app.include_router(auth.router, prefix="/api")
app.include_router(reservations.router, prefix="/api")


# Endpoints principales
@app.get("/", response_model=ApiResponse)
async def root():
    """
    Endpoint ra√≠z con informaci√≥n b√°sica de la API.
    """
    return ApiResponse(
        success=True,
        message="üé¨ Cinema Reservations API - Sistema funcionando correctamente",
        data={
            "version": "1.0.0",
            "docs": "/docs",
            "api_prefix": "/api",
            "uptime_minutes": (datetime.utcnow() - app_start_time).total_seconds() / 60
        }
    )


@app.get("/health", response_model=ApiResponse)
async def health_check(db: Session = Depends(get_db)):
    """
    Health check endpoint para verificar el estado del sistema.
    Incluye verificaci√≥n de base de datos y estad√≠sticas b√°sicas.
    """
    try:
        # Verificar conexi√≥n a base de datos
        stats = get_database_stats(db)
        
        return ApiResponse(
            success=True,
            message="Sistema saludable - Todos los servicios funcionando",
            data={
                "status": "healthy",
                "database": "connected",
                "uptime_minutes": round((datetime.utcnow() - app_start_time).total_seconds() / 60, 2),
                "stats": stats
            }
        )
        
    except Exception as e:
        logger.error(f"‚ùå Health check fall√≥: {e}")
        return JSONResponse(
            status_code=503,
            content={
                "success": False,
                "message": f"Sistema no saludable: {str(e)}",
                "data": {
                    "status": "unhealthy",
                    "error": str(e)
                }
            }
        )


# Manejador de errores global
@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    """
    Manejador global de excepciones para logging y respuestas consistentes.
    """
    logger.error(f"‚ùå Error no manejado en {request.url}: {exc}")
    
    return JSONResponse(
        status_code=500,
        content={
            "success": False,
            "message": "Error interno del servidor",
            "data": {
                "error_type": type(exc).__name__,
                "timestamp": datetime.utcnow().isoformat()
            }
        }
    )


# Mensaje de bienvenida al iniciar
if __name__ == "__main__":
    import uvicorn
    
    logger.info("üé¨ Iniciando Cinema Reservations API...")
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )